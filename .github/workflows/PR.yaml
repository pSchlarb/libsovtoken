name: Libsovtoken - PR Workflow
on:
  pull_request:
    paths:
      - '**'
      - '!libsovtoken/Cargo.toml'
     
jobs:
  workflow-setup:
    name: Initialize Workflow
    runs-on: ubuntu-latest
    outputs:
      CACHE_KEY_BUILD: ${{ steps.setup.outputs.CACHE_KEY_BUILD }}
      CACHE_KEY_POOL: ${{ steps.pool_setup.outputs.CACHE_KEY_POOL }}
      UBUNTU_VERSION: ${{ steps.setup.outputs.UBUNTU_VERSION }}
      # Expose the lowercase version of the GitHub repository name
      # to all subsequent jobs that reference image repositories
      # as the push and pull operations require the URL of the repository
      # to be in lowercase.
      GITHUB_REPOSITORY_NAME: ${{ steps.setup.outputs.GITHUB_REPOSITORY_NAME }}
      distribution: ${{ steps.setup.outputs.distribution }}
      publish: ${{ steps.setup.outputs.publish }}
      testsNeeded: ${{ steps.testsNeeded.outputs.testsNeeded }}
      newVersion : ${{ steps.version.outputs.newVersion }}
    steps:
      - name: checkout source code
        uses: actions/checkout@v3
      - name: setup
        id: setup
        uses: hyperledger/indy-shared-gha/.github/actions/workflow-setup@v1
        with:
          ownerRepo: "sovrin-foundation"
      - name: setup pool data
        id: pool_setup
        run: |
          echo "CACHE_KEY_POOL=${{ hashFiles('devops/indy-pool/Dockerfile') }}" >> $GITHUB_OUTPUT
          echo "::group::DEBUG"
          echo "CACHE_KEY-POOL is set to ${{ hashFiles('devops/indy-pool/Dockerfile') }}"
          echo "::endgroup::"
      - name: testsNeeded
        id: testsNeeded
        uses: dorny/paths-filter@v2
        with:
          filters: |
            testsNeeded:
              - '**.rs'
              - '.github/**'
              - '**.toml'
      - id: timestamp
        run: |
          export timestamp=$(date +%s)
          echo "timestamp=$timestamp" >> $GITHUB_OUTPUT
          echo "::group::DEBUG"
          echo "timestamp=$timestamp"
          echo "::endgroup::"
      - name: Get Current version
        id: version
        env:
          timestamp: ${{ steps.timestamp.outputs.timestamp }}
        run: |
          version=$(grep "version =" libsovtoken/Cargo.toml | grep -oP "[\d\.]+\d(-(dev|rc)(\d+))?")
          if echo $version | grep -oP "\-(dev|rc)[0-9]?" >> /dev/null ;then
            echo "newVersion=$(echo $version | sed -rE 's~(([0-9]\.)+[0-9]-(dev|rc))([0-9]+)~\1$timestamp~')" >> $GITHUB_OUTPUT
          else
            echo "newVersion=$version-dev$timestamp" >> $GITHUB_OUTPUT
          fi
  build-image:  
    name: Create DIND Image
    needs: [workflow-setup]
    if: ${{ needs.workflow-setup.outputs.testsNeeded == 'true' }}
    uses: hyperledger/indy-shared-gha/.github/workflows/buildimage.yaml@v1
    with:
      CACHE_KEY_BUILD: ${{ needs.workflow-setup.outputs.CACHE_KEY_BUILD }}
      DOCKER_IMAGE: ghcr.io/${{ needs.workflow-setup.outputs.GITHUB_REPOSITORY_NAME }}/libsovtoken-dind
      UBUNTU_VERSION: ${{ needs.workflow-setup.outputs.UBUNTU_VERSION }}
  
  build-pool-image:
    name: Create Pool Image
    needs: [workflow-setup]
    uses: ./.github/workflows/reuseable_build_pool.yaml
    with:
      CACHE_KEY_POOL: ${{ needs.workflow-setup.outputs.CACHE_KEY_POOL }}
      DOCKER_IMAGE: ghcr.io/${{ needs.workflow-setup.outputs.GITHUB_REPOSITORY_NAME }}/libsovtoken-pool

  build-and-test:
    name: Build and build-and-test
    needs: [workflow-setup,build-image, build-pool-image]
    runs-on: ubuntu-latest
    container: 
      image: ghcr.io/${{ needs.workflow-setup.outputs.GITHUB_REPOSITORY_NAME }}/libsovtoken-dind:latest
      options: --privileged
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Log into the GitHub Container Registry
        if: steps.cache-image.outputs.cache-hit != 'true'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}


      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with: 
          components: clippy
      
      - name: Cache cargo resources
        uses: Swatinem/rust-cache@v2

      - name: Install cargo-bump cargo-deb
        run: cargo install cargo-bump cargo-deb

      - name: Cargo Bump version
        run: cargo bump ${{ needs.workflow-setup.outputs.newVersion }} --manifest-path libsovtoken/Cargo.toml

      
      - name: Lint with clippy
        continue-on-error: true
        run: cargo clippy --manifest-path libsovtoken/Cargo.toml

      - name: Set up Indy Pool and Docker network
        run: |
          docker network create poolnet --subnet 192.168.0.0/16
          docker run -itd -p 9701-9708:9701-9708 --network poolnet --ip 192.168.0.2 ghcr.io/${{ needs.workflow-setup.outputs.GITHUB_REPOSITORY_NAME }}/libsovtoken-pool:latest
          docker network connect poolnet $(cat /etc/hostname)
          
      - name: Test libsovtoken
        env:
          TEST_POOL_IP: 192.168.0.2
        run: cargo test --manifest-path libsovtoken/Cargo.toml -- --test-threads=1
      
      - name: Build 
        run: cargo build --release --manifest-path libsovtoken/Cargo.toml

      - name: Build deb package
        run: cargo deb --manifest-path libsovtoken/Cargo.toml

      - name: Upload deb
        uses: actions/upload-artifact@v3
        with:
          name: libsovtoken-deb
          path: libsovtoken/target/debian/*.deb
          retention-days: 5

      - uses: actions/upload-artifact@v3
        with:
          name: libsovtoken-build
          path: libsovtoken/target/release
          retention-days: 5

  statusCheck:
    name: statusCheck
    runs-on: ubuntu-latest
    needs: [workflow-setup, build-and-test]
    if: ${{ needs.workflow-setup.outputs.testsNeeded == 'false' || success() }}
    steps:
      - run: 'echo "Just a status Check (Always true, when executed) for branch protection rules(blocks merging while test are running and if tests fail)." '